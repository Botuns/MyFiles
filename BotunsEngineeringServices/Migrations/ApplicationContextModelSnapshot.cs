// <auto-generated />
using System;
using BotunsEngineeringServices.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BotunsEngineeringServices.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("LocalGovernment")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Town")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.ClientContracts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContractId");

                    b.ToTable("ClientContracts");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("ContractDuration")
                        .HasColumnType("time");

                    b.Property<double>("ContractPrice")
                        .HasColumnType("double");

                    b.Property<int>("HireType")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("WorkerRefNo")
                        .HasColumnType("text");

                    b.Property<int>("WorkerType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.WorkerClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerClients");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Admin", b =>
                {
                    b.HasOne("BotunsEngineeringServices.Entities.Address", "Address")
                        .WithMany("AdminAddress")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Client", b =>
                {
                    b.HasOne("BotunsEngineeringServices.Entities.Address", "Address")
                        .WithMany("ClientAddress")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.ClientContracts", b =>
                {
                    b.HasOne("BotunsEngineeringServices.Entities.Client", "Client")
                        .WithMany("ClientContracts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotunsEngineeringServices.Entities.Contract", "Contract")
                        .WithMany("ClientContracts")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Worker", b =>
                {
                    b.HasOne("BotunsEngineeringServices.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.WorkerClient", b =>
                {
                    b.HasOne("BotunsEngineeringServices.Entities.Client", "Client")
                        .WithMany("WorkerClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotunsEngineeringServices.Entities.Worker", "Worker")
                        .WithMany("WorkerClient")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Address", b =>
                {
                    b.Navigation("AdminAddress");

                    b.Navigation("ClientAddress");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Client", b =>
                {
                    b.Navigation("ClientContracts");

                    b.Navigation("WorkerClient");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Contract", b =>
                {
                    b.Navigation("ClientContracts");
                });

            modelBuilder.Entity("BotunsEngineeringServices.Entities.Worker", b =>
                {
                    b.Navigation("WorkerClient");
                });
#pragma warning restore 612, 618
        }
    }
}
